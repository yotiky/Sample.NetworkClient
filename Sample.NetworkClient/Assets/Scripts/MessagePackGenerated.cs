// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(8)
            {
                { typeof(global::MessagePackSamples.AddressBasic[]), 0 },
                { typeof(global::MessagePackSamples.IUnionSample), 1 },
                { typeof(global::MessagePackSamples.AddressBasic), 2 },
                { typeof(global::MessagePackSamples.AddressSample1), 3 },
                { typeof(global::MessagePackSamples.AddressSample2), 4 },
                { typeof(global::MessagePackSamples.BarClass), 5 },
                { typeof(global::MessagePackSamples.FooClass), 6 },
                { typeof(global::MessagePackSamples.PersonBasic), 7 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::MessagePackSamples.AddressBasic>();
                case 1: return new MessagePack.Formatters.IUnionSampleFormatter();
                case 2: return new MessagePack.Formatters.MessagePackSamples_AddressBasicFormatter();
                case 3: return new MessagePack.Formatters.MessagePackSamples_AddressSample1Formatter();
                case 4: return new MessagePack.Formatters.MessagePackSamples_AddressSample2Formatter();
                case 5: return new MessagePack.Formatters.MessagePackSamples_BarClassFormatter();
                case 6: return new MessagePack.Formatters.MessagePackSamples_FooClassFormatter();
                case 7: return new MessagePack.Formatters.MessagePackSamples_PersonBasicFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using System;
    using System.Buffers;
    using System.Collections.Generic;
    using MessagePack;

    public sealed class IUnionSampleFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MessagePackSamples.IUnionSample>
    {
        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly Dictionary<int, int> keyToJumpMap;

        public IUnionSampleFormatter()
        {
            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(2, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::MessagePackSamples.FooClass).TypeHandle, new KeyValuePair<int, int>(0, 0) },
                { typeof(global::MessagePackSamples.BarClass).TypeHandle, new KeyValuePair<int, int>(1, 1) },
            };
            this.keyToJumpMap = new Dictionary<int, int>(2)
            {
                { 0, 0 },
                { 1, 1 },
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::MessagePackSamples.IUnionSample value, global::MessagePack.MessagePackSerializerOptions options)
        {
            KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::MessagePackSamples.FooClass>().Serialize(ref writer, (global::MessagePackSamples.FooClass)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::MessagePackSamples.BarClass>().Serialize(ref writer, (global::MessagePackSamples.BarClass)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::MessagePackSamples.IUnionSample Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new InvalidOperationException("Invalid Union data was detected. Type:global::MessagePackSamples.IUnionSample");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::MessagePackSamples.IUnionSample result = null;
            switch (key)
            {
                case 0:
                    result = (global::MessagePackSamples.IUnionSample)options.Resolver.GetFormatterWithVerify<global::MessagePackSamples.FooClass>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::MessagePackSamples.IUnionSample)options.Resolver.GetFormatterWithVerify<global::MessagePackSamples.BarClass>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class MessagePackSamples_AddressBasicFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MessagePackSamples.AddressBasic>
    {


        public void Serialize(ref MessagePackWriter writer, global::MessagePackSamples.AddressBasic value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.Zipcode);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Address, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.TelephoneNumber, options);
        }

        public global::MessagePackSamples.AddressBasic Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __TelephoneNumber__ = default(string);
            var __Zipcode__ = default(int);
            var __Address__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 2:
                        __TelephoneNumber__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 0:
                        __Zipcode__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Address__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MessagePackSamples.AddressBasic();
            ____result.TelephoneNumber = __TelephoneNumber__;
            ____result.Zipcode = __Zipcode__;
            ____result.Address = __Address__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MessagePackSamples_AddressSample1Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MessagePackSamples.AddressSample1>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public MessagePackSamples_AddressSample1Formatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Foo", 0 },
                { "Bar", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Foo"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Bar"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::MessagePackSamples.AddressSample1 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Zipcode);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Address, options);
        }

        public global::MessagePackSamples.AddressSample1 Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Zipcode__ = default(int);
            var __Address__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Zipcode__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Address__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MessagePackSamples.AddressSample1();
            ____result.Zipcode = __Zipcode__;
            ____result.Address = __Address__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MessagePackSamples_AddressSample2Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MessagePackSamples.AddressSample2>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public MessagePackSamples_AddressSample2Formatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Zipcode", 0 },
                { "Address", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Zipcode"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Address"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::MessagePackSamples.AddressSample2 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Zipcode);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Address, options);
        }

        public global::MessagePackSamples.AddressSample2 Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Zipcode__ = default(int);
            var __Address__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Zipcode__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Address__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MessagePackSamples.AddressSample2();
            ____result.Zipcode = __Zipcode__;
            ____result.Address = __Address__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MessagePackSamples_BarClassFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MessagePackSamples.BarClass>
    {


        public void Serialize(ref MessagePackWriter writer, global::MessagePackSamples.BarClass value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Address, options);
        }

        public global::MessagePackSamples.BarClass Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Address__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Address__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MessagePackSamples.BarClass();
            ____result.Address = __Address__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MessagePackSamples_FooClassFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MessagePackSamples.FooClass>
    {


        public void Serialize(ref MessagePackWriter writer, global::MessagePackSamples.FooClass value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            writer.Write(value.Zipcode);
        }

        public global::MessagePackSamples.FooClass Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Zipcode__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Zipcode__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MessagePackSamples.FooClass();
            ____result.Zipcode = __Zipcode__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MessagePackSamples_PersonBasicFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MessagePackSamples.PersonBasic>
    {


        public void Serialize(ref MessagePackWriter writer, global::MessagePackSamples.PersonBasic value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.Id);
            formatterResolver.GetFormatterWithVerify<global::MessagePackSamples.AddressBasic[]>().Serialize(ref writer, value.Addresses, options);
        }

        public global::MessagePackSamples.PersonBasic Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Id__ = default(int);
            var __Addresses__ = default(global::MessagePackSamples.AddressBasic[]);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Id__ = reader.ReadInt32();
                        break;
                    case 1:
                        __Addresses__ = formatterResolver.GetFormatterWithVerify<global::MessagePackSamples.AddressBasic[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MessagePackSamples.PersonBasic();
            ____result.Id = __Id__;
            ____result.Addresses = __Addresses__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

